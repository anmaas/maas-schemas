/*

undefined
Personal document object

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from './components/units';
import * as Common_ from './components/common';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/personal-document.json';

// DocumentType
// The purpose of this remains a mystery
export type DocumentType = t.Branded<string, DocumentTypeBrand>;
export type DocumentTypeC = t.BrandC<t.StringC, DocumentTypeBrand>;
export const DocumentType: DocumentTypeC = t.brand(
  t.string,
  (x): x is t.Branded<string, DocumentTypeBrand> => true,
  'DocumentType',
);
export interface DocumentTypeBrand {
  readonly DocumentType: unique symbol;
}

// DocumentStatus
// The purpose of this remains a mystery
export type DocumentStatus = t.Branded<
  string &
    (
      | 'PENDING'
      | 'APPROVED'
      | 'DECLINED'
      | 'EXPIRED'
      | 'RESUBMISSION_REQUESTED'
      | 'ABANDONED'
    ),
  DocumentStatusBrand
>;
export type DocumentStatusC = t.BrandC<
  t.IntersectionC<
    [
      t.StringC,
      t.UnionC<
        [
          t.LiteralC<'PENDING'>,
          t.LiteralC<'APPROVED'>,
          t.LiteralC<'DECLINED'>,
          t.LiteralC<'EXPIRED'>,
          t.LiteralC<'RESUBMISSION_REQUESTED'>,
          t.LiteralC<'ABANDONED'>,
        ]
      >,
    ]
  >,
  DocumentStatusBrand
>;
export const DocumentStatus: DocumentStatusC = t.brand(
  t.intersection([
    t.string,
    t.union([
      t.literal('PENDING'),
      t.literal('APPROVED'),
      t.literal('DECLINED'),
      t.literal('EXPIRED'),
      t.literal('RESUBMISSION_REQUESTED'),
      t.literal('ABANDONED'),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    string &
      (
        | 'PENDING'
        | 'APPROVED'
        | 'DECLINED'
        | 'EXPIRED'
        | 'RESUBMISSION_REQUESTED'
        | 'ABANDONED'
      ),
    DocumentStatusBrand
  > => true,
  'DocumentStatus',
);
export interface DocumentStatusBrand {
  readonly DocumentStatus: unique symbol;
}

// DocumentStatusPENDING
// The purpose of this remains a mystery
export type DocumentStatusPENDING = t.Branded<
  DocumentStatus & 'PENDING',
  DocumentStatusPENDINGBrand
>;
export type DocumentStatusPENDINGC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'PENDING'>]>,
  DocumentStatusPENDINGBrand
>;
export const DocumentStatusPENDING: DocumentStatusPENDINGC = t.brand(
  t.intersection([DocumentStatus, t.literal('PENDING')]),
  (x): x is t.Branded<DocumentStatus & 'PENDING', DocumentStatusPENDINGBrand> => true,
  'DocumentStatusPENDING',
);
export interface DocumentStatusPENDINGBrand {
  readonly DocumentStatusPENDING: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusPENDING).decodeSync(defaultDocumentStatusPENDING) // => defaultDocumentStatusPENDING */
export const defaultDocumentStatusPENDING: DocumentStatusPENDING = ('PENDING' as unknown) as DocumentStatusPENDING;

// DocumentStatusAPPROVED
// The purpose of this remains a mystery
export type DocumentStatusAPPROVED = t.Branded<
  DocumentStatus & 'APPROVED',
  DocumentStatusAPPROVEDBrand
>;
export type DocumentStatusAPPROVEDC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'APPROVED'>]>,
  DocumentStatusAPPROVEDBrand
>;
export const DocumentStatusAPPROVED: DocumentStatusAPPROVEDC = t.brand(
  t.intersection([DocumentStatus, t.literal('APPROVED')]),
  (x): x is t.Branded<DocumentStatus & 'APPROVED', DocumentStatusAPPROVEDBrand> => true,
  'DocumentStatusAPPROVED',
);
export interface DocumentStatusAPPROVEDBrand {
  readonly DocumentStatusAPPROVED: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusAPPROVED).decodeSync(defaultDocumentStatusAPPROVED) // => defaultDocumentStatusAPPROVED */
export const defaultDocumentStatusAPPROVED: DocumentStatusAPPROVED = ('APPROVED' as unknown) as DocumentStatusAPPROVED;

// DocumentStatusDECLINED
// The purpose of this remains a mystery
export type DocumentStatusDECLINED = t.Branded<
  DocumentStatus & 'DECLINED',
  DocumentStatusDECLINEDBrand
>;
export type DocumentStatusDECLINEDC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'DECLINED'>]>,
  DocumentStatusDECLINEDBrand
>;
export const DocumentStatusDECLINED: DocumentStatusDECLINEDC = t.brand(
  t.intersection([DocumentStatus, t.literal('DECLINED')]),
  (x): x is t.Branded<DocumentStatus & 'DECLINED', DocumentStatusDECLINEDBrand> => true,
  'DocumentStatusDECLINED',
);
export interface DocumentStatusDECLINEDBrand {
  readonly DocumentStatusDECLINED: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusDECLINED).decodeSync(defaultDocumentStatusDECLINED) // => defaultDocumentStatusDECLINED */
export const defaultDocumentStatusDECLINED: DocumentStatusDECLINED = ('DECLINED' as unknown) as DocumentStatusDECLINED;

// DocumentStatusEXPIRED
// The purpose of this remains a mystery
export type DocumentStatusEXPIRED = t.Branded<
  DocumentStatus & 'EXPIRED',
  DocumentStatusEXPIREDBrand
>;
export type DocumentStatusEXPIREDC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'EXPIRED'>]>,
  DocumentStatusEXPIREDBrand
>;
export const DocumentStatusEXPIRED: DocumentStatusEXPIREDC = t.brand(
  t.intersection([DocumentStatus, t.literal('EXPIRED')]),
  (x): x is t.Branded<DocumentStatus & 'EXPIRED', DocumentStatusEXPIREDBrand> => true,
  'DocumentStatusEXPIRED',
);
export interface DocumentStatusEXPIREDBrand {
  readonly DocumentStatusEXPIRED: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusEXPIRED).decodeSync(defaultDocumentStatusEXPIRED) // => defaultDocumentStatusEXPIRED */
export const defaultDocumentStatusEXPIRED: DocumentStatusEXPIRED = ('EXPIRED' as unknown) as DocumentStatusEXPIRED;

// DocumentStatusRESUBMISSION_REQUESTED
// The purpose of this remains a mystery
export type DocumentStatusRESUBMISSION_REQUESTED = t.Branded<
  DocumentStatus & 'RESUBMISSION_REQUESTED',
  DocumentStatusRESUBMISSION_REQUESTEDBrand
>;
export type DocumentStatusRESUBMISSION_REQUESTEDC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'RESUBMISSION_REQUESTED'>]>,
  DocumentStatusRESUBMISSION_REQUESTEDBrand
>;
export const DocumentStatusRESUBMISSION_REQUESTED: DocumentStatusRESUBMISSION_REQUESTEDC = t.brand(
  t.intersection([DocumentStatus, t.literal('RESUBMISSION_REQUESTED')]),
  (
    x,
  ): x is t.Branded<
    DocumentStatus & 'RESUBMISSION_REQUESTED',
    DocumentStatusRESUBMISSION_REQUESTEDBrand
  > => true,
  'DocumentStatusRESUBMISSION_REQUESTED',
);
export interface DocumentStatusRESUBMISSION_REQUESTEDBrand {
  readonly DocumentStatusRESUBMISSION_REQUESTED: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusRESUBMISSION_REQUESTED).decodeSync(defaultDocumentStatusRESUBMISSION_REQUESTED) // => defaultDocumentStatusRESUBMISSION_REQUESTED */
export const defaultDocumentStatusRESUBMISSION_REQUESTED: DocumentStatusRESUBMISSION_REQUESTED = ('RESUBMISSION_REQUESTED' as unknown) as DocumentStatusRESUBMISSION_REQUESTED;

// DocumentStatusABANDONED
// The purpose of this remains a mystery
export type DocumentStatusABANDONED = t.Branded<
  DocumentStatus & 'ABANDONED',
  DocumentStatusABANDONEDBrand
>;
export type DocumentStatusABANDONEDC = t.BrandC<
  t.IntersectionC<[typeof DocumentStatus, t.LiteralC<'ABANDONED'>]>,
  DocumentStatusABANDONEDBrand
>;
export const DocumentStatusABANDONED: DocumentStatusABANDONEDC = t.brand(
  t.intersection([DocumentStatus, t.literal('ABANDONED')]),
  (x): x is t.Branded<DocumentStatus & 'ABANDONED', DocumentStatusABANDONEDBrand> => true,
  'DocumentStatusABANDONED',
);
export interface DocumentStatusABANDONEDBrand {
  readonly DocumentStatusABANDONED: unique symbol;
}
/** require('io-ts-validator').validator(DocumentStatusABANDONED).decodeSync(defaultDocumentStatusABANDONED) // => defaultDocumentStatusABANDONED */
export const defaultDocumentStatusABANDONED: DocumentStatusABANDONED = ('ABANDONED' as unknown) as DocumentStatusABANDONED;

// PartyId
// The purpose of this remains a mystery
export type PartyId = t.Branded<string, PartyIdBrand>;
export type PartyIdC = t.BrandC<t.StringC, PartyIdBrand>;
export const PartyId: PartyIdC = t.brand(
  t.string,
  (x): x is t.Branded<string, PartyIdBrand> =>
    (typeof x !== 'string' || x.length >= 1) && (typeof x !== 'string' || x.length <= 64),
  'PartyId',
);
export interface PartyIdBrand {
  readonly PartyId: unique symbol;
}

// PartyType
// The purpose of this remains a mystery
export type PartyType = t.Branded<string, PartyTypeBrand>;
export type PartyTypeC = t.BrandC<t.StringC, PartyTypeBrand>;
export const PartyType: PartyTypeC = t.brand(
  t.string,
  (x): x is t.Branded<string, PartyTypeBrand> =>
    (typeof x !== 'string' || x.length >= 1) && (typeof x !== 'string' || x.length <= 64),
  'PartyType',
);
export interface PartyTypeBrand {
  readonly PartyType: unique symbol;
}

// PersonalDocument
// The default export. More information at the top.
export type PersonalDocument = t.Branded<
  {
    id?: Units_.Uuid;
    identityId?: Units_.IdentityId;
    type?: DocumentType;
    documentNumber?: string;
    nameOnDocument?: string;
    issuingCountry?: string;
    status?: DocumentStatus;
    validFrom?: Units_.IsoDate;
    validTo?: Units_.IsoDate;
    details?: {
      category?: string;
    };
    media?: Array<
      {
        content?: string;
        context?: string;
      } & {
        content: Defined;
        context: Defined;
      }
    >;
    kycServiceId?: string;
    firstName?: Common_.PersonalName | null;
    lastName?: Common_.PersonalName | null;
  } & {
    type: Defined;
    documentNumber: Defined;
    issuingCountry: Defined;
    status: Defined;
    validFrom: Defined;
    validTo: Defined;
  },
  PersonalDocumentBrand
>;
export type PersonalDocumentC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Units_.Uuid;
        identityId: typeof Units_.IdentityId;
        type: typeof DocumentType;
        documentNumber: t.StringC;
        nameOnDocument: t.StringC;
        issuingCountry: t.StringC;
        status: typeof DocumentStatus;
        validFrom: typeof Units_.IsoDate;
        validTo: typeof Units_.IsoDate;
        details: t.PartialC<{
          category: t.StringC;
        }>;
        media: t.ArrayC<
          t.IntersectionC<
            [
              t.PartialC<{
                content: t.StringC;
                context: t.StringC;
              }>,
              t.TypeC<{
                content: typeof Defined;
                context: typeof Defined;
              }>,
            ]
          >
        >;
        kycServiceId: t.StringC;
        firstName: t.UnionC<[typeof Common_.PersonalName, t.NullC]>;
        lastName: t.UnionC<[typeof Common_.PersonalName, t.NullC]>;
      }>,
      t.TypeC<{
        type: typeof Defined;
        documentNumber: typeof Defined;
        issuingCountry: typeof Defined;
        status: typeof Defined;
        validFrom: typeof Defined;
        validTo: typeof Defined;
      }>,
    ]
  >,
  PersonalDocumentBrand
>;
export const PersonalDocument: PersonalDocumentC = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Uuid,
      identityId: Units_.IdentityId,
      type: DocumentType,
      documentNumber: t.string,
      nameOnDocument: t.string,
      issuingCountry: t.string,
      status: DocumentStatus,
      validFrom: Units_.IsoDate,
      validTo: Units_.IsoDate,
      details: t.partial({
        category: t.string,
      }),
      media: t.array(
        t.intersection([
          t.partial({
            content: t.string,
            context: t.string,
          }),
          t.type({
            content: Defined,
            context: Defined,
          }),
        ]),
      ),
      kycServiceId: t.string,
      firstName: t.union([Common_.PersonalName, t.null]),
      lastName: t.union([Common_.PersonalName, t.null]),
    }),
    t.type({
      type: Defined,
      documentNumber: Defined,
      issuingCountry: Defined,
      status: Defined,
      validFrom: Defined,
      validTo: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Uuid;
      identityId?: Units_.IdentityId;
      type?: DocumentType;
      documentNumber?: string;
      nameOnDocument?: string;
      issuingCountry?: string;
      status?: DocumentStatus;
      validFrom?: Units_.IsoDate;
      validTo?: Units_.IsoDate;
      details?: {
        category?: string;
      };
      media?: Array<
        {
          content?: string;
          context?: string;
        } & {
          content: Defined;
          context: Defined;
        }
      >;
      kycServiceId?: string;
      firstName?: Common_.PersonalName | null;
      lastName?: Common_.PersonalName | null;
    } & {
      type: Defined;
      documentNumber: Defined;
      issuingCountry: Defined;
      status: Defined;
      validFrom: Defined;
      validTo: Defined;
    },
    PersonalDocumentBrand
  > => true,
  'PersonalDocument',
);
export interface PersonalDocumentBrand {
  readonly PersonalDocument: unique symbol;
}

export default PersonalDocument;

// Success
